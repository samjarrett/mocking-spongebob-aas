AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  CertificateArn:
    Type: String

  DomainName: 
    Type: String

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LogGroupGenerate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GenerateFunction}"
      RetentionInDays: 7

  Api: 
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes: 
        - "*~1*"

  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateArn
      DomainName: !Ref DomainName

  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref Api
      Stage: Prod
  
  GenerateLibraries:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes: 
        - python3.7
      RetentionPolicy: Delete
      ContentUri: ../build

  GenerateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.main
      Runtime: python3.7
      CodeUri: ../src
      Layers:
        - !Ref GenerateLibraries
      Role: !GetAtt Role.Arn
      Timeout: 30
      Events:
        GenerateResource:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{string}
            Method: get

Outputs:
  DomainName:
    Value: !GetAtt APIDomainName.DistributionDomainName
